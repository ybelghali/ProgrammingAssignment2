demo()
recursion
help(plotmath)
help(nlm)
f <- function(x) sum((x-1:length(x))^2)
nlm(f, c(10,10))
nlm(f, c(10,10), print.level = 2)
utils::str(nlm(f, c(5), hessian = TRUE))
help(loadfile)
help(load)
library(gdata)
library(XLConnect)
help(XLConnect)
install.packages("XLConnect")
wk = loadWorkbook("powerball numbers.xls")
library(RODBC)
v=c(1,2,3,4,5)
v
v[2]
v[-4]
is.integer(v[2])
class(v[2])
class(v[2]) == "numeric"
x <- matrix(a=rnorm(30, 0), b=rnorm(50, 2), c=rnorm(20, 5))
x <- matrix( cbind(a=rnorm(30,0), b=rnorm(30,2), c=rnorm(30, 5)), nrow=30, ncol=3)
x
x <- matrix( cbind(rnorm(30,0), rnorm(30,2), rnorm(30, 5)), nrow=30, ncol=3)
x
cnames(x) <- c("method1", "method2", "method3")
names(x) <- c("method1", "method2", "method3")
x
x <- matrix( cbind(rnorm(30,0), rnorm(30,2), rnorm(30, 5)), nrow=30, ncol=3)
x
apply(x, 2, mean)
apply(x, 1, mean)
cls
clear
clear()
apply(x, 2, mean)
apply(x, function(x) length[x[x<0]])
apply(x, function(x) length(x[x<0]])
apply(x, function(x) length(x[x<0]))
apply(x, 2, function(x) length(x[x<0]))
apply(x, 2, function(x) length(x[x<2]))
apply(x, 2, function(x) length(x[x<0]))
apply(x, 2, function(x) is.vector(x))
apply(x, 2, function(x) mean(x[x>0])
)
apply(x, 2, function(x) mean(x[x>0]))
clsss(x)
class(x)
x
x <- matrix( cbind(rnorm(30,0), rnorm(30,2), rnorm(30, 5)), nrow=30, ncol=3)
class(x)
x
apply(x, mean, x[x>0])
apply(x, mean, function(x) x[x>0])
apply(x, mean, function() x[x>0])
apply(x, 2, function(x) mean(x[x>0])
apply(x, 2, function(x) mean(x[x>0])
q
apply(x, 2, function(x) mean(x[x>0]))
apply(x, 2, function(x) mean(x[x<0]))
M <- matrix (seq(32), dim( c(4,4,2) )
M
M <- matrix (seq(32), dim( c(4,4,2) ) )
M <- matrix (seq(32), dim = c(4,4,2) )
M <- matrix (seq(32), dim = c(4,4,2) )
M <- array (seq(32), dim = c(4,4,2) )
M
apply( M, 1, sum )
1+5+9+13+17+21+25+29
apply( M, c(1,2), sum )
L <- list (a=1, b=rnorm(20,5), c=c(1:115))
lapply(L, sum)
(1+115)/2
(115)*(116)/2
lapply(L, length)
sapply(L, sum)
sapply(L, length)
lapply(1:5, function(x) x=rnorm(3,x))
sapply(1:5, function(x) x=rnorm(3,x))
setwd("~/Documents/R/Assignement_2")
source("matrixinverse.R")
m <- makeCacheMatrix(6,4,3,1)
m
m <- makeCacheMatrix(3)
m
print(m)
m <- matrix(31,3,4,5)
m
m <- matrix(c(45,5,1,4), 2, 2)
m
solve(m)
d <- makeCacheMatrix(m)
cacheSolve(m)
m.get()
m.getinverse()
cacheSolve()
m.cacheSolve()
d.get()
d.getinverse()
cacheSolve(d)
cacheSolve(d)
new_m <- matrix(c(1, -1/4, -1/4, 1), 2, 2)
new_m <- makeCacheMatrix(new_m)
cacheSolve(new_m)
new_m
print (new_m)
class(new_m)
new_m <- makeCacheMatrix( matrix(1,-1/4,-1/4,1), 2, 2)
new_m <- makeCacheMatrix( matrix(c(1,-1/4,-1/4,1), 2, 2))
new_m
cacheSolve(new_m)
source("cachematrix.R")
setwd("~/Documents/R/Assignement_2/ProgrammingAssignment2")
source("cachematrix.R")
new_m <- makeCacheMatrix( matrix(c(1,-1/4,-1/4,1), 2, 2))
cacheSolve(new_m)
